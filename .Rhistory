hist(y,log="x")
hist(y,xlim=c(0,b))
summary(y)
hist(y,xlim=c(0,b),1000)
hist(y,xlim=c(0,b),10000)
hist(y,xlim=c(0,b),100000)
b     <- 100
par(mfrow=c(1,1))
set.seed(1)
N <- 1000
y <- qpareto(u=runif(N),xm,alpha)
hist(y,xlim=c(0,b),100000)
hist(y,xlim=c(0,b),10000)
hist(y,xlim=c(0,b),100000)
N <- 10000
y <- qpareto(u=runif(N),xm,alpha)
hist(y,xlim=c(0,b),100000)
Y <- matrix(qpareto(u=runif(N*length(w)),xm,alpha),nrow=5)
w <- seq(from=0,to=5,by=1)
Y <- matrix(qpareto(u=runif(N*length(w)),xm,alpha),nrow=5)
dim(Y)
w <- seq(from=0,to=25,by=1)
Y <- matrix(qpareto(u=runif(N*length(w)),xm,alpha),nrow=5)
dim(Y)
Y <- matrix(qpareto(u=runif(N*length(w)),xm,alpha),nrow=length(w))
dim(Y)
w  <- matrix(seq(from=0,to=25,by=1),ncol=1)
Y  <- matrix(qpareto(u=runif(N*length(w)),xm,alpha),nrow=nrow(w))
dim(Y)
cf <- exp(1i*Y*w[,rep(1,ncol(Y))])
dim(cf)
cf <- apply(cf,1,mean)
dim(cf)
length(cf)
barplot(cf,col="red")
cf
par(mfrow=c(2,1))
barplot(Re(cf),col="red")
barplot(Im(cf),col="red")
library(hypergeo,quietly = TRUE)
install.packages("hypergeo")
install.packages("actuar")
library(actuar,  quietly = TRUE)
library(hypergeo,quietly = TRUE)
library(actuar,  quietly = TRUE)
# Set parameters (each defined in the sequel)
f      <- 0.005
lambda <- 0.05
alpha  <- 0.9
m      <- 2
A      <- 1
xm     <- A*(f/lambda)^(1/alpha)
xstar  <- m*A
b      <- qpareto(p=99.5/100,shape=alpha,scale=xm)+xm
k      <- 110
omegak <- k*pi/(b-xm)
# Example calculation
genhypergeo(U=1, L=1-alpha, z=-1i*omegak*xm, series=TRUE)
genhypergeo(U=1, L=1-alpha, z=-1i*omegak*xm, series=TRUE, check_mod=TRUE)
genhypergeo_contfrac(U=1, L=1-alpha, z=-1i*omegak*xm)
Nseries    <- 25     #terms in the series
series     <- 1+0i   #instantiate
partialSum <- series #retain series' partial sums for assessing convergence
z          <- -1i*omegak*xm
pochhammer <- function(x,n){
if( n<0  ) return( NA )
if( n==0 ) return( 1  )
prod(x+0:(n-1))
}
for( n in 1:Nseries ){
series     <- series + z^n/pochhammer(x=1-alpha,n)
partialSum <- c(partialSum,series)
}
(series)
(series/alpha+gamma(-alpha)*z^alpha*exp(z))
par(mfrow=c(2,1))
barplot(Re(partialSum),col="red",      main="Real partial sums",
names.arg=0:Nseries, xlab="index k",ylim=c(0,1.1))
barplot(Im(partialSum),col="darkgreen",main="Imag partial sums",
names.arg=0:Nseries, xlab="index k",ylim=c(0,0.5))
phi_S_genhypergeo <- function(omega,xm,alpha,Nseries=NULL){
e <- 0.01
z <- e-1i*omega*xm
M <- genhypergeo( U=1, L=1-alpha, z=z, series=TRUE )
return( pi/(gamma(1+alpha)*sin(pi*(1-alpha))) * (M*exp(-z)/gamma(1-alpha) - z^alpha) )
}
# My method to sum the series
phi_S <- function(omega,xm,alpha,Nseries=100,...){
omega <- matrix(omega,ncol=1)
N     <- matrix(0:Nseries,nrow=1)[rep(1,length(omega)),]
z     <- -1i*omega*xm
Z     <- z[,rep(1,Nseries+1)]^N
Pochh <- cbind(1,matrix(cumprod(1-alpha+0:(Nseries-1)),nrow=1))[rep(1,length(omega)),]
M     <- Z/Pochh
M     <- apply(M,1,sum)
return( as.vector( pi/(gamma(1+alpha)*sin(pi*(1-alpha))) *
(M*exp(-z)/gamma(1-alpha) - z^alpha) ) )
}
K  <- floor( (b/xm-1)/pi ) #ensures |-i*wk*xm|<1 for series convergence
k  <- 0:(K-1)
wk <- k*pi/(b-xm)
#example_phi_S <- phi_S_genhypergeo( omega=wk, xm=xm, alpha=alpha, Nseries=Nseries )
example_phi_S <- phi_S( omega=wk, xm=xm, alpha=alpha, Nseries=Nseries )
k0 <- round(omegak*(b-xm)/pi)
example_phi_S[k0+1]
par(mfrow=c(2,1))
real.ylim <- c(0,1.1)
imag.ylim <- c(0,0.7)
barplot(Re(example_phi_S),col="red",      main="(Series) Real phi_S",
names.arg=k, xlab="index k",ylim=real.ylim)
barplot(Im(example_phi_S),col="darkgreen",main="(Series) Imaginary phi_S",
names.arg=k, xlab="index k",ylim=imag.ylim)
zeta <- 0.25
J    <- 100
y    <- matrix( cos(pi*(0:(J-1)+0.5)/J), ncol=1 )
u    <- xm+log(2/(1-y))/zeta
w    <- matrix(wk,ncol=1)
E    <- exp( 1i * (w %*% t(u)) )
v    <- sqrt((1+y)/(1-y)) * u^(-1-alpha)
g    <- (pi/zeta/J) * E %*% v
example_phi_S_quadrature <- as.vector( alpha*xm^alpha * g )
par(mfrow=c(2,1))
barplot(Re(example_phi_S_quadrature),col="red",
main="(Quadrature) Real phi_S",     names.arg=k, xlab="index k",ylim=real.ylim)
barplot(Im(example_phi_S_quadrature),col="darkgreen",
main="(Quadrature) Imaginary phi_S",names.arg=k, xlab="index k",ylim=imag.ylim)
m      <- 10000
w      <- matrix(wk,ncol=1)[,rep(1,m)]
S      <- matrix(rpareto(n=length(wk)*m,shape=alpha,scale=xm)+xm,ncol=m)
Phi_MC <- apply( exp(1i*w*S), 1, mean )
par(mfrow=c(2,1))
barplot(Re(Phi_MC),col="red",      main="(Monte-Carlo) Real phi_S",
names.arg=k, xlab="index k",ylim=real.ylim)
barplot(Im(Phi_MC),col="darkgreen",main="(Monte-Carlo) Imaginary phi_S",
names.arg=k, xlab="index k",ylim=imag.ylim)
# Probability of generating a loss exceeding the ALP
f      <- 0.005
# Poisson rate parameter
lambda <- 0.05
# Pareto scale parameter
alpha  <- 0.9
# Pareto Truncation threshold
m      <- 2
A      <- 1
xm     <- A*(f/lambda)^(1/alpha)
# Pareto maximum
xstar  <- m*A
cdf <- function(x,f,lambda,alpha,m,A){
xm         <- A*(f/lambda)^(1/alpha)
xstar      <- m*A
cdf        <- rep(1,length(x))
cdf[x<xm]  <- 0
logic      <- x>=xm & x<xstar
cdf[logic] <- 1-(xm*A/x[logic])^alpha
cdf
}
# The plot
x <- seq(from=0,to=3,length.out=1001)
plot(x,cdf(x,f,lambda,alpha,m,A),type="l",xlim=range(x),col=2,lwd=2,
main="Admin Re Truncated Pareto cdf")
Pdf <- function(x,f,lambda,alpha,m,A,my.Inf=10){
xm         <- A*(f/lambda)^(1/alpha)
xstar      <- m*A
Pdf        <- rep(NA,length(x))
logic      <- x>=xm & x<xstar
Pdf[logic] <- alpha*xm^alpha/x[logic]^(alpha+1)
logic      <- x==xstar
Pdf[logic] <- my.Inf
Pdf
}
# A plot of the density
my.Inf <- 10
x <- seq(from=0,to=3,length.out=301)
plot(x,Pdf(x,f,lambda,alpha,m,A),type="l",xlim=range(x),
ylim=c(0,my.Inf),
col=2,lwd=2,main="Admin Re Truncated Pareto pdf")
# Characteristic Function of a Truncated Pareto Variable
phi_S_trunc <- function(omega,xm,xstar,alpha,phi,...){
return( phi(omega,xm,alpha)
+ (xm/xstar)^alpha * (exp(1i*omega*xstar) - phi(omega,xstar,alpha)) )
}
# Characteristic function of a compound Poisson variable for severities of choice
phi_compound_Poisson <- function(omega,lambda,phi1=phi_S,phi2=NULL,...){
if( is.null(phi2) ){
exp(lambda*(phi1(omega=omega,xm=xm,alpha=alpha,Nseries=Nseries)-1))
} else {
exp(lambda*(phi2(omega=omega,xm=xm,xstar=xstar,alpha=alpha,
phi=phi1,
Nseries=Nseries)-1))
}
}
example_phi_S_trunc <- phi_S_trunc( omega=wk, xm=xm, xstar=xstar, alpha=alpha,
phi=phi_S, Nseries=Nseries )
par(mfrow=c(2,1))
barplot(Re(example_phi_S_trunc),col="red",      main="(Series) Real phi_S_truncated",
names.arg=k, xlab="index k",ylim=real.ylim)
barplot(Im(example_phi_S_trunc),col="darkgreen",main="(Series) Imag phi_S_truncated",
names.arg=k, xlab="index k",ylim=imag.ylim)
omega <- wk
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
barplot(Re(example_phi_compound_Poisson),col="red",
main="Real phi for Compound Poisson Variable (non-truncated)",
names.arg=k, xlab="index k")
barplot(Im(example_phi_compound_Poisson),col="darkgreen",
main="Imag phi for Compound Poisson Variable (non-truncated)",
names.arg=k, xlab="index k")
wk
omega <- seq(from=0,to=100,length.out=101)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",col="red",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
xlab="omega")
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
xlab="omega")
omega <- seq(from=0,to=200,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=100,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=150,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=120,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=130,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=150,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=150,length.out=223)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=149,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
omega <- seq(from=0,to=140,length.out=201)
example_phi_compound_Poisson <- phi_compound_Poisson( omega=omega, lambda=lambda )
par(mfrow=c(2,1))
plot(omega,Re(example_phi_compound_Poisson),col="red",type="l",lwd=2,
main="Real phi for Compound Poisson Variable (non-truncated)",
ylab="Re(phi)",xlab="omega")
plot(omega,Im(example_phi_compound_Poisson),col="darkgreen",type="l",lwd=2,
main="Imag phi for Compound Poisson Variable (non-truncated)",
ylab="Im(phi)",xlab="omega")
alpha <- 0.9
xm    <- 2
b     <- 100
dpareto <- function(x,xm,a){
a*xm^a/x^(1+a)
}
ppareto <- function(x,xm,a){
1-(xm/x)^a
}
qpareto <- function(u,xm,a){
xm*(1-u)^(-1/alpha)
}
par(mfrow=c(2,1))
x <- seq(from=xm,to=b,length.out=101)
plot(x,dpareto(x,xm,alpha),type="l",col="red",lwd=2)
plot(x,ppareto(x,xm,alpha),type="l",col="red",lwd=2)
N <- 10000
par(mfrow=c(1,1))
set.seed(1)
x <- qpareto(u=runif(N),xm,alpha)
hist(x[x<b],xlim=c(0,b),100)
w  <- matrix(seq(from=0,to=1,by=0.01),ncol=1)
x  <- matrix(qpareto(u=runif(N*length(w)),xm,alpha),nrow=nrow(w))
cf <- exp(1i*x*w[,rep(1,ncol(x))])
cf <- apply(cf,1,mean)
par(mfrow=c(2,1))
barplot(Re(cf),col="red")
barplot(Im(cf),col="red")
alpha
xm
lambda
lambda <- 0.05
N
lambda <- 0.05
N.rep  <- 1e4
set.seed(123)
N <- rpois(n=N.rep, lambda=lambda)
hist(N)
N
barplot(N)
barplot(as.vector(N))
summary(N)
summary(as.factor(N))
N.rep  <- 1e5
set.seed(123)
N <- rpois(n=N.rep, lambda=lambda)
summary(as.factor(N))
qpareto
max(N)
max(N)
K <- rep(qpareto(u=runif(N*max(N))),ncol=max(N))
K <- rep(qpareto(u=runif(N*max(N)),xm=xm,a=alpha),ncol=max(N))
dim(K)
K
K <- matrix(qpareto(u=runif(N*max(N)),xm=xm,a=alpha),ncol=max(N))
N.rep
K <- matrix(qpareto(u=runif(N.rep*max(N)),xm=xm,a=alpha),ncol=max(N))
dim(K)
head(K)
K <- cbind(0,K)
head(K)
M <- matrix(rep(NA,N.rep*(1+max(N))),ncol=1+max(N))
dim(M)
dim(K)
for( i in 1:ncol(M) ){
M[,i] <- (N<=i)*1
}
head(M)
head(N)
M <- matrix(rep(NA,N.rep*(1+max(N))),ncol=1+max(N))
for( i in 1:ncol(M) ){
}
M[,i] <- (N>i)*1
head(M)
head(N)
M <- matrix(N,ncol=1)[,rep(1,1+max(N))]
head(M)
tail(M)
M[1:25,]
M[1:100,]
M[1:1000,]
M[N==2,]
M[N==3,]
summary(as.factor(N))
M[col(M)>N]<-0
head(M)
tail(M)
tail(N)
M[N==2,]
M <- matrix(rep(0,N.rep*(1+max(N))),ncol=1+max(N))
M[col(M)<=N] <- 1
tail(M)
M[N==2,]
M[N==3,]
M[N==1,]
M[N==2,]
M[N==3,]
M[N==0,]
M[N==1,]
M[N==2,]
M[N==3,]
M <- matrix(rep(1,N.rep*(1+max(N))),ncol=1+max(N))
M[col(M)>N] <- 0
M[N==3,]
M <- matrix(rep(1,N.rep*(1+max(N))),ncol=1+max(N))
M[col(M)>N-1] <- 0
M[N==3,]
M[col(M)>N+1] <- 0
M <- matrix(rep(1,N.rep*(1+max(N))),ncol=1+max(N))
M[col(M)>N+1] <- 0
M[N==3,]
M[N==2,]
M[N==1,]
summary(as.factor(N))
Y <- apply(K*M,1,sum)
head(Y)
summary(Y)
which.max(Y)
K[58037,]
summary(Y)
sum(Y==0)
hist(Y)
hist(Y[Y!=0])
summary(Y[Y!=0])
boxplot(Y[Y!=0])
?quantile
hist(Y[Y>0 & Y<quantile(x=Y,probs=0.95)])
Y[Y>0 & Y<quantile(x=Y,probs=0.95)]
Y<quantile(x=Y,probs=0.95)
quantile(x=Y,probs=0.95)
quantile(x=Y[Y>0],probs=0.95)
hist(Y[Y>0 & Y<quantile(x=Y[Y>0],probs=0.95)])
logic <- Y>0 & Y<quantile(x=Y[Y>0],probs=0.95)]
hist(Y[logic])
logic <- Y>0 & Y<quantile(x=Y[Y>0],probs=0.95)
hist(Y[logic])
hist(Y[logic],main="Compound Poisson Density")
par(mfrow=c(1,1))
logic <- Y>0 & Y<quantile(x=Y[Y>0],probs=0.95)
hist(Y[logic],main="Compound Poisson Density")
N.non.zero <- sum(logic)
N.non.zero
N.non.zero <- sum(Y>0)
N.non.zero
load("E:/coursera/Data Science Specialization/Machine Learning/Project/TEMP.RData")
?library
nrow(testing)
nrow(test)
predict_classe <- predict(modFitCV,newdata=testing)
summary(predict_classe)
?predict.gbm
predict_classe <- predict(modFitCV,newdata=testing,type="response")
predict_classe <- predict(modFitCV,newdata=testing,type="raw")
summary(predict_classe)
predict_classe <- predict(modFitCV,newdata=testing,type="prob")
summary(predict_classe)
head(predict_classe)
predict_classe <- predict(modFitCV,newdata=testing)
head(predict_classe)
summary(testing$classe)
summary(predict_classe)
DF <- data.frame(observed=testing$classe,predicted=predict_classe)
CM <- confusionMatrix(data=DF)
confusionMatrix
library(caret)
CM <- confusionMatrix(data=DF)
head(DF)
table(DF)
CM <- confusionMatrix(data=table(DF))
print(CM)
summary(testing$classe)
?table
(table.DF <- table(DF))
table.DF
CM <- confusionMatrix(data=table.DF)
print(CM)
table.DF
CM
CM[1,2]
CM[[1]]
CM[[2]]
CM[[3]]
CM[[4]]
CM[[4]][2,1]
CM[[4]][2,1]
CM$overall
( overall.statistics <- CM$overall )
CM$overall$Accuracy
CM$overall[1]
CM$overall[[1]]
CM$overall[2]
?confusionMatrix.train
confusionMatrix.train(modFitCV)
confusionMatrix.train(modFit)
confusionMatrix.train(modFitCV)
?tabkle
?table
testing
test
(predict(modFitCV,newdata=test))
xdir5 <- "C:/Users/Douglas/Documents/coursera/Data Science Specialization/Machine Learning/PeerAssessment/"
xdir  <- xdir4
xdir  <- xdir5
setwd(xdir)
dir()
